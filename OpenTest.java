import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

public class OpenTest implements Command{
    String path;
    private Scanner scanner = new Scanner(System.in);
    public OpenTest(){
        this.path = newName();
        //execute();
    }

    @Override
    public void execute() {
        ReadOrEdit();
        System.out.println(path);
    }


    public String checkTXT(String file){
        if(file.endsWith(".txt")){
            return file;
        }else{
            return file+".txt";
        }
    }


    public String newName(){
        System.out.println("Existing files are printed lower\n");
        File.files.stream()
                .filter(file -> file.getPath().startsWith("./tests/"))
                .forEach(System.out::println);
        System.out.println("Please, enter the name of the file you want to open\n" +
                "(you can write either type just filename or with \".txt\")");
        String res = checkTXT(scanner.next());
        if (Command.ifNotAvaliable1(res,"./tests/")){
            return res;
        }else{
            System.out.println("Such file does not exist\n");
            newName();
        }
        return null;
    }


    public void ReadOrEdit(){
        System.out.println("Please, enter \"read\" if you want to read the file\n"+
                "or enter \"edit\" if you want to edit the file");
        switch (Inputs.toEnum(scanner.next())){
            case Inputs.READ:
                readFile();
                break;
            case Inputs.EDIT:
                editFile();
                break;
            default:
                //System.out.println("Invalid command, try again");
                ReadOrEdit();
        }
    }

    private void readFile() {
        try {
            Path file = Paths.get("./tests/" + path);
            Files.readAllLines(file)
                    .forEach(System.out::println);
        } catch (IOException e) {
            System.out.println("read file opentest");
            throw new RuntimeException(e);
        }
        stopEdit();
    }


    private void editFile() {
        System.out.println("You are in a file editing!");
        AtomicInteger count = new AtomicInteger(1);
        try {
            Path file = Paths.get("./tests/" + path);
            List<String> lines = Files.readAllLines(file);
            lines.stream().forEach(iter -> {
                System.out.println(count.getAndIncrement() + ": " + iter);
            });
            System.out.println("Enter the line number you want to edit:");
            int lineNumber = scanner.nextInt();
            System.out.println("Enter the new content for the line:");
            String newContent = scanner.next();
            lines.set(lineNumber - 1, newContent);
            Files.write(file, lines);
            System.out.println("File edited");
            System.out.println("Input \"stop\" if you want to stop editing or \"continue\" if you want to continue");
            switch (Inputs.toEnum(scanner.next())){
                case Inputs.CONTINUE: editFile();
                break;
                case Inputs.STOP:
                    break;
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    private  void stopEdit(){
        System.out.println("Input \"stop\" to stop watching the file\n"+
                "or enter \"edit\" if you want to edit this file");
        switch (Inputs.toEnum(scanner.next())){
            case Inputs.STOP:
                break;
            case Inputs.EDIT:
                editFile();
                break;
            default:
                System.out.println("Invalid command, try again");
                stopEdit();
        }
    }
}
